<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsnekoray.github.io/news/article-66008.htm" />
    <meta charset="utf-8">
    <!-- Always force latest IE rendering engine -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具</title>
        <meta name="description" content="回顾总结 到目前为止，Spring源码中AbstractApplicationContext#refresh方法的已经解读到第11个方法finishBeanFactoryInitialization," />
        <link rel="icon" href="/assets/website/img/windowsnekoray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsNekoRay节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsnekoray.github.io/news/article-66008.htm" />
    <meta property="og:site_name" content="WindowsNekoRay节点分享站" />
    <meta property="og:title" content="Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具" />
    <meta property="og:image" content="https://windowsnekoray.github.io/uploads/20240707/73c01fc849dbc7d2d8ba814f2f7652eb.webp" />
        <meta property="og:release_date" content="2025-03-02T09:38:52" />
    <meta property="og:updated_time" content="2025-03-02T09:38:52" />
        <meta property="og:description" content="回顾总结 到目前为止，Spring源码中AbstractApplicationContext#refresh方法的已经解读到第11个方法finishBeanFactoryInitialization," />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- BOOTSTRAP CSS -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/bootstrap.min.css">
    <!-- FONT-AWESOME -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/font-awesome-4.7.0/css/font-awesome.min.css">
    <!-- OWL CAROUSEL -->
    <link href="/assets/website/css/windowsnekoray/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/windowsnekoray/owl.theme.default.min.css" rel="stylesheet">
    <!-- LIGHTBOX -->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/lightbox.css">
    <!--Style CSS file-->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FP5Q3FML8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FP5Q3FML8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ====== Preloader ======  -->
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section section-left"></div>
        <div class="loader-section section-right"></div>
    </div>
    <!-- ======End Preloader ======  -->
    <!-- ======START NAVGITION ======  -->
    <nav class="navbar navbar-expand-lg">
        <!-- logo -->
        <a class="navbar-brand" href="/">
                <span>Windows NekoRay</span>
                </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText">
            <span class="icon-bar"><i class="fa fa-bars fa-2x"></i></span>
        </button>
        <!--End of Resposive Toggle icon-->
        <div class="collapse navbar-collapse" id="navbarText">
            <!--Main menu navigation list-->
            <ul class="navbar-nav ml-auto line">
                                <li class="nav-item">
                    <a class="nav-link" href="/">首页</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/client.htm">客户端</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/news/">新闻资讯</a>
                </li>
                            </ul>
            <!--End of Main menu navigation list-->
        </div>
        <!--End of resposive collapse class-->
    </nav>
    <!-- ====== END NAVGITION ======  -->
    <!-- =======START HEADER=========== -->
    <header class="home list" id="home" data-scroll-index="0">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 home-content mt-md-5 mt-sm-5">
                    <h2 class="heading-tertiary mt-3 mb-3">
                        Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具                    </h2>
                    <p class="mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- ====== END HEADER ======  -->
    <!-- Scroll to Top -->
    <div id="scroll-to-top"><i class="fa fa-arrow-up fa-fw"></i></div>
    <!-- ====== START ABOUT ======  -->
    <section class="about padding" id="about" data-scroll-index="1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h3 id="回顾总结">回顾总结</h3> <p>到目前为止，<code>Spring</code>源码中<code>AbstractApplicationContext#refresh</code>方法的已经解读到第11个方法<code>finishBeanFactoryInitialization</code>,前10个方法介绍了：</p> <ul> <li> <code>BeanFactory</code>的准备，创建，刷新，个性化<code>BeanFactory</code>的扩展点，自定义属性解析；</li> <li>环境信息<code>Environment</code>的加载（包括环境变量、系统变量等）；</li> <li> <code>BeanDefinition</code>的加载，解析，自定义<code>xml</code>的方式；</li> <li> <code>BeanFactoryPostProcessor</code>的注册与执行流程，<code>BeanDefinitionRegistryPostProcessor</code>的解析，<code>ConfigurationClassPostProcessor</code>对<code>Spring</code>注解的解析过程（<code>@Component、@PropertySources、@PropertySource、@ComponentScans、@ComponentScan、@Import</code>等注解的解析），<code>Spring Boot</code> 是如何通过<code>@Configuration+@Import + ImportSelector</code>进行自动装配的等；</li> <li> <code>BeanPostProcessor</code>的注册流程；</li> <li>国际化，<code>Spring</code>事件驱动的加载执行过程；</li> </ul> <h3 id="finishbeanfactoryinitialization-解析过程">finishBeanFactoryInitialization 解析过程</h3> <p>接下来开始解析<code>Spring</code>对<code>Bean</code>的创建过程，上源码：</p> <pre><code class="language-java">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {   // Initialize conversion service for this context.   if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;       beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {     // 设置转换服务，转换服务用来对属性值进行解析的     beanFactory.setConversionService(       beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));   }    // Register a default embedded value resolver if no BeanFactoryPostProcessor   // (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:   // at this point, primarily for resolution in annotation attribute values.   // 如果之前没有注册过任何 BeanFactoryPostProcessor（例如 PropertySourcesPlaceholderConfigurer bean），   // 则注册一个默认的嵌入值解析器：此时，主要用于解析注释属性值。   if (!beanFactory.hasEmbeddedValueResolver()) {     beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));   }    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);   for (String weaverAwareName : weaverAwareNames) {     getBean(weaverAwareName);   }    // Stop using the temporary ClassLoader for type matching.   beanFactory.setTempClassLoader(null);    // Allow for caching all bean definition metadata, not expecting further changes.   // 允许缓存所有 bean 定义元数据，而不是期望进一步的更改   beanFactory.freezeConfiguration();    // Instantiate all remaining (non-lazy-init) singletons.   // 实例化所有剩余的（非惰性初始化）单例   beanFactory.preInstantiateSingletons(); } </code></pre> <ul> <li>判断是否存在转换服务，有就设置</li> <li>判断是否有内置的值解析器，没有就创建一个处理占位符的解析器</li> <li>实例化LoadTimeWeaverAware，进行早期的Bean的创建</li> <li>停止使用临时的类加载器</li> <li>冻结BeanDefinition的元数据信息，防止被修改</li> <li>开始实例化所有的单例bean对象</li> </ul> <p>除了<code>beanFactory.preInstantiateSingletons()</code> 方法，其他都是<code>Bean</code>创建的准备，接下来一个一个分析，首先是转换服务的设置。</p> <h3 id="转换服务conversionservice的初始化">转换服务ConversionService的初始化</h3> <p>方法一开始设置了一个转换服务，这个转换服务在<code>Spring</code>中还是非常的重要的，比如我们<code>xml</code>中配置一个<code>String</code> 类型的属性值，但是在<code>Bean</code>的定义中是一个<code>Integer</code>类型的，这时<code>Spring</code>就会自动帮我们转出来，他是怎么做的呢？</p> <p>在<code>Spring</code>中有几个比较重要的接口:</p> <ul> <li> <code>Converer</code> 用于将对象<code>S</code>转换为对象<code>T</code> </li> <li> <code>ConverterFactory</code> 一个转换工厂，能够将对象<code>S</code>转成一类对象<code>R</code>的子集<code>T</code>，比如可以将字符串<code>S</code>转换为<code>T</code>（<code>Integer、Long</code>等）<code>Number</code>类型<code>R</code>的子集</li> <li> <code>GenericConverter</code>支持多种类型之间互相转换。</li> </ul> <p><code>Spring</code>转换器接口<code>ConversionService</code> 的默认实现是<code>DefaultConversionService</code>,这个默认的转换器实现中，内置了很多的转换器，比如：</p> <pre><code class="language-java">public static void addDefaultConverters(ConverterRegistry converterRegistry) {   addScalarConverters(converterRegistry);   addCollectionConverters(converterRegistry);    converterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));   converterRegistry.addConverter(new StringToTimeZoneConverter());   converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());   converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());    converterRegistry.addConverter(new ObjectToObjectConverter());   converterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));   converterRegistry.addConverter(new FallbackObjectToStringConverter());   converterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry)); }  public static void addCollectionConverters(ConverterRegistry converterRegistry) {   ConversionService conversionService = (ConversionService) converterRegistry;   // 数组转集合   converterRegistry.addConverter(new ArrayToCollectionConverter(conversionService));   // 集合转数组   converterRegistry.addConverter(new CollectionToArrayConverter(conversionService));    converterRegistry.addConverter(new ArrayToArrayConverter(conversionService));   converterRegistry.addConverter(new CollectionToCollectionConverter(conversionService));   converterRegistry.addConverter(new MapToMapConverter(conversionService));   // 数组转字符串   converterRegistry.addConverter(new ArrayToStringConverter(conversionService));   converterRegistry.addConverter(new StringToArrayConverter(conversionService));    converterRegistry.addConverter(new ArrayToObjectConverter(conversionService));   converterRegistry.addConverter(new ObjectToArrayConverter(conversionService));    converterRegistry.addConverter(new CollectionToStringConverter(conversionService));   converterRegistry.addConverter(new StringToCollectionConverter(conversionService));    converterRegistry.addConverter(new CollectionToObjectConverter(conversionService));   converterRegistry.addConverter(new ObjectToCollectionConverter(conversionService));    converterRegistry.addConverter(new StreamConverter(conversionService)); }  private static void addScalarConverters(ConverterRegistry converterRegistry) {   converterRegistry.addConverterFactory(new NumberToNumberConverterFactory());    converterRegistry.addConverterFactory(new StringToNumberConverterFactory());   converterRegistry.addConverter(Number.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToCharacterConverter());   converterRegistry.addConverter(Character.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new NumberToCharacterConverter());   converterRegistry.addConverterFactory(new CharacterToNumberFactory());    converterRegistry.addConverter(new StringToBooleanConverter());   converterRegistry.addConverter(Boolean.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverterFactory(new StringToEnumConverterFactory());   converterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry));    converterRegistry.addConverterFactory(new IntegerToEnumConverterFactory());   converterRegistry.addConverter(new EnumToIntegerConverter((ConversionService) converterRegistry));    converterRegistry.addConverter(new StringToLocaleConverter());   converterRegistry.addConverter(Locale.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToCharsetConverter());   converterRegistry.addConverter(Charset.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToCurrencyConverter());   converterRegistry.addConverter(Currency.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToPropertiesConverter());   converterRegistry.addConverter(new PropertiesToStringConverter());    converterRegistry.addConverter(new StringToUUIDConverter());   converterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter()); } </code></pre> <p>可以说是非常的丰富的，基本上常见都是Spring提供了，非常贴心。</p> <p>那么怎么使用呢？</p> <p>不懂当然是上官网：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#core-convert"  target="_blank"  rel="nofollow">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#core-convert</a> ，这里可以看到我们只需要将<code>ConversionServiceFactoryBean</code> 配置到Spring容器中就可以了，<code>Spring</code>内置的转换器就可以工作了，非常方便。</p> <p><code>ConversionServiceFactoryBean</code>实现了<code>FactoryBean</code>接口和<code>InitializingBean</code> 接口，而<code>InitializingBean#afterPropertiesSet</code>是初始化<code>Bean</code>过程中需要执行的。<code>ConversionServiceFactoryBean</code>源码中：</p> <pre><code class="language-java">@Override public void afterPropertiesSet() {   this.conversionService = createConversionService();   ConversionServiceFactory.registerConverters(this.converters, this.conversionService); }  protected GenericConversionService createConversionService() {   return new DefaultConversionService(); }  // 构造函数 public DefaultConversionService() {   // 添加默认的转换器   addDefaultConverters(this); } </code></pre> <p>可以看到这个<code>ConversionServiceFactroyBean</code>就是用来初始化转换器的，并且这个类还提供了扩展，可以自定义转换器加入到转换器集合中。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/142a03309c504ae1f5194c482d30cc20.jpg" alt="Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具"></p> <h3 id="自定义转换器">自定义转换器</h3> <p>自定义String转Integer类型的转换器：</p> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class StringToIntegerConverter implements Converter&lt;String,Integer&gt; , ConditionalConverter { 	@Override 	public Integer convert(String source) { 		return NumberUtils.parseNumber(source,Integer.class); 	}  	@Override 	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { 		System.out.println(sourceType.getType()); 		System.out.println(targetType.getType()); 		return true; 	} } </code></pre> <p>逻辑非常简单，直接调用<code>Spring</code>提供的工具类进行转换。</p> <p>配置xml：</p> <pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" 	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	   xmlns:context="http://www.springframework.org/schema/context" 	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"&gt;  	&lt;context:component-scan base-package="com.redwinter.selfconverter"/&gt; 	&lt;!--配置转化器--&gt; 	&lt;bean class="org.springframework.context.support.ConversionServiceFactoryBean"&gt; 		&lt;property name="converters"&gt; 			&lt;set&gt; 				&lt;bean class="com.redwinter.selfconverter.StringToIntegerConverter"/&gt; 			&lt;/set&gt; 		&lt;/property&gt; 	&lt;/bean&gt;  &lt;/beans&gt; </code></pre> <p>创建转换器客户端：</p> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ @Service public class MyConverter {  	private final ConversionService conversionService;  	public MyConverter(ConversionService conversionService) { 		this.conversionService = conversionService; 	}  	public void test(String source){ 		System.out.println(conversionService.convert(source, Integer.class)); 	} } </code></pre> <p>创建测试：</p> <pre><code class="language-java">/**  * @author &lt;a href="2360564660@qq.com"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class FactoryBeanTest {  	@Test 	public void test(){ 		MyClassPathXmlApplicationContext context = new MyClassPathXmlApplicationContext("spring-factory.xml"); 		MyConverter myConverter = context.getBean(MyConverter.class); 		myConverter.test("12345"); 	} } </code></pre> <p>输出：</p> <pre><code class="language-tex">class java.lang.String class java.lang.Integer 12345 </code></pre> <p>分析完转换服务，接下来分析 值解析器的添加。</p> <h3 id="默认的值解析器">默认的值解析器</h3> <pre><code class="language-java">// 省略代码..... // Register a default embedded value resolver if no BeanFactoryPostProcessor // (such as a PropertySourcesPlaceholderConfigurer bean) registered any before: // at this point, primarily for resolution in annotation attribute values. // 如果之前没有注册过任何 BeanFactoryPostProcessor（例如 PropertySourcesPlaceholderConfigurer bean）， // 则注册一个默认的嵌入值解析器：此时，主要用于解析注释属性值。 if (!beanFactory.hasEmbeddedValueResolver()) {   beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal)); } // 省略代码.....   </code></pre> <p>首先判断了容器中是否存在嵌入的值解析器，如果没有就添加一个进去，这里添加进去的是<code>StringValueResolver</code>，点击<code>resolvePlaceHolders</code>方法进去，最终会在<code>AbstractPropertyResolver#resolvePlaceholders</code>中创建一个<code>PropertyPlaceholderHelper</code>类</p> <pre><code class="language-java">private PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {   // 前缀为 ${ ，后缀为 }，值的分隔符为 : ,比如 ${username:zhansan} username没有的话，后面的为默认的值   return new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix,                                        this.valueSeparator, ignoreUnresolvablePlaceholders); } </code></pre> <p>如果已经注册过一个<code>BFPP</code>的占位符解析器的话，就不需要在注册了，<code>BFPP</code>的占位符解析器就是<code>PropertySourcesPlaceholderConfigurer</code> ，专门用于解析占位符的，比如在<code>xml</code>中或者<code>yaml</code>中，配置类似于<code>${jdbc.username}</code> 这种格式的，就会被解析器解析。<code>PropertySourcesPlaceholderConfigurer</code>  这个解析器实现了<code>BeanFactoryPostProcessor</code>接口，能够对<code>BeanDefinition</code>进行处理，当然也可以对属性值进行处理。</p> <p>分析完值解析器，继续往下分析。</p> <h3 id="bean创建前的其他准备">Bean创建前的其他准备</h3> <pre><code class="language-java">// 省略代码..... // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early. // 在prepareBeanFactory 准备BeanFactory时设置进去的，如果存在，则开始早期Bean的创建 String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false); for (String weaverAwareName : weaverAwareNames) {   getBean(weaverAwareName); }  // Stop using the temporary ClassLoader for type matching. // 停止使用临时的类加载器，这里也是在准备BeanFactory时设置进去的 beanFactory.setTempClassLoader(null);  // Allow for caching all bean definition metadata, not expecting further changes. // 允许缓存所有 bean 定义元数据，而不是期望进一步的更改 beanFactory.freezeConfiguration(); // 省略代码..... </code></pre> <p>这里从容器中获取了<code>AOP</code>的织入，如果有的话就开始进行早期的<code>Bean</code>的创建；然后停止了临时的类加载器；然后就是冻结<code>BeanDefinition</code>的元数据信息。</p> <pre><code class="language-java">public void freezeConfiguration() {   this.configurationFrozen = true;   this.frozenBeanDefinitionNames = StringUtils.toStringArray(this.beanDefinitionNames); } </code></pre> <p>点击进来，其实就是设置了标识，防止后期对<code>BeanDefinition</code>的修改。</p> <p>这前面的几个判断和方法实际上都是<code>Bean</code>创建的准备工作，接下来开始分析<code>preInstantiateSingletons</code> 预实例化所有的单例<code>Bean</code>。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-66007.htm">权威分析@RequestParam和@RequestPart 的区别（官方文档）</a></p>
                                        <p>下一个：<a href="/news/article-66643.htm">宠物领养平台国内外发展现状（宠物领养平台如何盈利）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-67291.htm" title="沈阳芭比娃娃专柜（沈阳哪里卖芭比娃娃的专卖店）">沈阳芭比娃娃专柜（沈阳哪里卖芭比娃娃的专卖店）</a></li>
                        <li class="py-2"><a href="/news/article-41661.htm" title="免费领养宠物的平台有哪些软件可以下载（免费领养宠物的小程序）">免费领养宠物的平台有哪些软件可以下载（免费领养宠物的小程序）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-free-v2ray-subscribe.htm" title="「3月5日」最高速度20.7M/S，2025年NekoRay每天更新免费节点订阅链接">「3月5日」最高速度20.7M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-13-node-share-links.htm" title="「2月13日」最高速度21M/S，2025年NekoRay每天更新免费节点订阅链接">「2月13日」最高速度21M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-47122.htm" title="建议穷人养的10种猫100元以下的猫（建议穷人养的10种猫100元以下的猫咪）">建议穷人养的10种猫100元以下的猫（建议穷人养的10种猫100元以下的猫咪）</a></li>
                        <li class="py-2"><a href="/news/article-37685.htm" title="动物园宠物饲养员（动物园饲养员怎么样）">动物园宠物饲养员（动物园饲养员怎么样）</a></li>
                        <li class="py-2"><a href="/news/article-62969.htm" title="动物疫苗价格表图片大全大图高清下载（动物疫苗价格表图片大全大图高清下载软件）">动物疫苗价格表图片大全大图高清下载（动物疫苗价格表图片大全大图高清下载软件）</a></li>
                        <li class="py-2"><a href="/news/article-64772.htm" title="猫三联就打一针有用吗（不出门的猫有必要打猫三联吗）">猫三联就打一针有用吗（不出门的猫有必要打猫三联吗）</a></li>
                        <li class="py-2"><a href="/news/article-47121.htm" title="【襄阳宠物狗|襄阳宠物狗信息】（襄阳17家正规宠物医院）">【襄阳宠物狗|襄阳宠物狗信息】（襄阳17家正规宠物医院）</a></li>
                        <li class="py-2"><a href="/news/article-64153.htm" title="宠物猫疫苗费用多少（宠物猫疫苗费用多少钱）">宠物猫疫苗费用多少（宠物猫疫苗费用多少钱）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ====== END ABOUT======  -->
        <!-- ====== START FOOTER ======  -->
    <section class="footer">
        <div class="container">
            <div class="row">
                <!-- START FOOTER BOTTOM -->
                <div class="offset-md-3 col-md-6 offset-md-3">
                    <!-- START RIGHTS -->
                    <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>WindowsNekoRay节点分享站 版权所有</p>
                        <p>Powered by WordPress</p>
                    </div>
                    <!-- END RIGHTS -->
                </div>
                <!-- END FOOTER BOTTOM -->
            </div>
        </div>
    </section>
    <!-- ====== END FOOTER ======  -->
    <!-- ====== JS ======  -->
    <!--jquery-3.3.1 js-->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery-3.3.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/windowsnekoray/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/windowsnekoray/bootstrap.min.js"></script>
    <!-- scrollIt js -->
    <script src="/assets/website/js/frontend/windowsnekoray/scrollIt.min.js"></script>
    <!-- countTo js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.countTo.js"></script>
    <!-- filter js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.filterizr.min.js"></script>
    <!-- waypoints js -->
    <script src="/assets/website/js/frontend/windowsnekoray/waypoints.min.js"></script>
    <!-- owl carousel js -->
    <script src="/assets/website/js/frontend/windowsnekoray/owl.carousel.min.js"></script>
    <!-- validator js -->
    <script src="/assets/website/js/frontend/windowsnekoray/validator.js"></script>
    <!-- coustom js -->
    <script src="/assets/website/js/frontend/windowsnekoray/main.js"></script>
    <!-- lightbox js -->
    <script src="/assets/website/js/frontend/windowsnekoray/lightbox.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>