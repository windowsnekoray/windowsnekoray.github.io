<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsnekoray.github.io/news/article-82751.htm" />
    <meta charset="utf-8">
    <!-- Always force latest IE rendering engine -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SpringBoot 实现前后端分离的跨域访问（CORS）</title>
        <meta name="description" content="序言：跨域资源共享向来都是热门的需求，使用CORS可以帮助我们快速实现跨域访问，只需在服务端进行授权即可，无需在前端添加额外设置，比传统的JSONP跨域更安全和便捷。   简单来说，CORS是一种访问" />
        <link rel="icon" href="/assets/website/img/windowsnekoray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsNekoRay节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsnekoray.github.io/news/article-82751.htm" />
    <meta property="og:site_name" content="WindowsNekoRay节点分享站" />
    <meta property="og:title" content="SpringBoot 实现前后端分离的跨域访问（CORS）" />
    <meta property="og:image" content="https://windowsnekoray.github.io/uploads/20240707/2b9ddc7df3552035ea02446234d83c9b.webp" />
        <meta property="og:release_date" content="2025-03-27T08:16:10" />
    <meta property="og:updated_time" content="2025-03-27T08:16:10" />
        <meta property="og:description" content="序言：跨域资源共享向来都是热门的需求，使用CORS可以帮助我们快速实现跨域访问，只需在服务端进行授权即可，无需在前端添加额外设置，比传统的JSONP跨域更安全和便捷。   简单来说，CORS是一种访问" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot 实现前后端分离的跨域访问（CORS）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- BOOTSTRAP CSS -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/bootstrap.min.css">
    <!-- FONT-AWESOME -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/font-awesome-4.7.0/css/font-awesome.min.css">
    <!-- OWL CAROUSEL -->
    <link href="/assets/website/css/windowsnekoray/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/windowsnekoray/owl.theme.default.min.css" rel="stylesheet">
    <!-- LIGHTBOX -->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/lightbox.css">
    <!--Style CSS file-->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FP5Q3FML8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FP5Q3FML8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ====== Preloader ======  -->
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section section-left"></div>
        <div class="loader-section section-right"></div>
    </div>
    <!-- ======End Preloader ======  -->
    <!-- ======START NAVGITION ======  -->
    <nav class="navbar navbar-expand-lg">
        <!-- logo -->
        <a class="navbar-brand" href="/">
                <span>Windows NekoRay</span>
                </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText">
            <span class="icon-bar"><i class="fa fa-bars fa-2x"></i></span>
        </button>
        <!--End of Resposive Toggle icon-->
        <div class="collapse navbar-collapse" id="navbarText">
            <!--Main menu navigation list-->
            <ul class="navbar-nav ml-auto line">
                                <li class="nav-item">
                    <a class="nav-link" href="/">首页</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/client.htm">客户端</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/news/">新闻资讯</a>
                </li>
                            </ul>
            <!--End of Main menu navigation list-->
        </div>
        <!--End of resposive collapse class-->
    </nav>
    <!-- ====== END NAVGITION ======  -->
    <!-- =======START HEADER=========== -->
    <header class="home list" id="home" data-scroll-index="0">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 home-content mt-md-5 mt-sm-5">
                    <h2 class="heading-tertiary mt-3 mb-3">
                        SpringBoot 实现前后端分离的跨域访问（CORS）                    </h2>
                    <p class="mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- ====== END HEADER ======  -->
    <!-- Scroll to Top -->
    <div id="scroll-to-top"><i class="fa fa-arrow-up fa-fw"></i></div>
    <!-- ====== START ABOUT ======  -->
    <section class="about padding" id="about" data-scroll-index="1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <blockquote> <p>序言：跨域资源共享向来都是热门的需求，使用CORS可以帮助我们快速实现跨域访问，只需在服务端进行授权即可，无需在前端添加额外设置，比传统的JSONP跨域更安全和便捷。</p> </blockquote> </h1> <p>简单来说，CORS是一种访问机制，英文全称是Cross-Origin Resource Sharing，即我们常说的跨域资源共享，通过在服务器端设置响应头，把发起跨域的原始域名添加到Access-Control-Allow-Origin 即可。</p> </h1> <p>CORS实现跨域访问并不是一蹴而就的，需要借助浏览器的支持，从原理题图我们可以清楚看到，简单的请求（通常指GET/POST/HEAD方式，并没有去增加额外的请求头信息）直接创建了跨域请求的XHR对象，而复杂的请求则要求先发送一个"预检"请求，待服务器批准后才能真正发起跨域访问请求。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230207/0b60b1d68c007324b9c0a393144e002e.jpg"></p> <p>来自维基百科</p> <p>根据官方文档<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.w3.org/TR/cors/"  title="W3C规范-CORS" rel="nofollow">W3C规范-CORS</a> 的描述，目前CORS使用了如下头部信息：</p> </h1> <blockquote> <p>温馨提示：<code>Request Headers</code> 无需人为干预，因为浏览器会自动识别跨域请求并添加对应的请求头。</p> </blockquote> <ul> <li> <p><code>Origin</code> 表示发起跨域请求的原始域。</p> </li> <li> <p><code>Access-Control-Request-Method</code> 表示发起跨域请求的方式，例如GET/POST。</p> </li> <li> <p><code>Access-Control-Request-Headers</code>表示发起跨域请求的额外头信息。</p> </li> </ul> </h1> <blockquote> <p>温馨提示：<code>Response Headers</code> 需要人为干预，通过设置响应头以帮助服务器资源进行跨域授权，例如允许哪些原始域进行跨域请求，是否允许响应信息携带Cookie等认证信息。</p> </blockquote> <ul> <li> <p><code>Access-Control-Allow-Origin</code> 表示允许哪些原始域进行跨域访问。</p> </li> <li> <p><code>Access-Control-Allow-Credentials</code>表示是否允许客户端获取用户凭据。</p> <p>使用场景：例如现在需要登录系统后才能发起跨域请求，并且要附带Cookie信息给服务器。则必须具备两个条件：<strong>1. 浏览器端：</strong>发送AJAX请求前需设置通信对象XHR的withCredentials 属性为true。 <strong>2.服务器端：</strong>设置Access-Control-Allow-Credentials为true。两个条件缺一不可，否则即使服务器同意发送Cookie，浏览器也无法获取。正确姿势如下：</p> </li> </ul> <pre><code>$.ajax({     url: 'localhost:8080',     xhrFields: {         withCredentials: true //表示发起跨域访问并要求携带Cookie等认证信息     },     success: function (r) {         console.log(r)     } }); </code></pre> <p>有好奇的小伙伴可能会问为什么在W3C手册中找不到跨域属性xhrFields的描述，因为该属性并不是通信对象XHR的默认属性，而是自定义属性，所以在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.w3school.com.cn/jquery/ajax_ajax.asp"  title="jQuery Ajax 参考手册" rel="nofollow">jQuery Ajax 参考手册</a> 中并没有明确注明，但我们可以在jQuery源码中找到这段蛛丝马迹，那么整体思路就很清晰了。</p> <pre><code>// Cross domain only allowed if supported through XMLHttpRequest     if ( support.cors || xhrSupported &amp;&amp; !options.crossDomain ) {         return {             send: function( headers, complete ) {                 var i,                     xhr = options.xhr();                  xhr.open(                     options.type,                     options.url,                     options.async,                     options.username,                     options.password                 );                  // Apply custom fields if provided                 if ( options.xhrFields ) {                     for ( i in options.xhrFields ) {                         xhr[ i ] = options.xhrFields[ i ];                     }                 }            ...     } </code></pre> <ul> <li> <p><code>Access-Control-Allow-Methods</code> 表示允许哪些跨域请求的提交方式。（例如GET/POST）</p> </li> <li> <p><code>Access-Control-Allow-Headers</code> 表示跨域请求的头部的允许范围。</p> </li> <li> <p><code>Access-Control-Expose-Headers</code> 表示允许暴露哪些头部信息给客户端。</p> <p>使用说明：基于安全考虑，如果没有设置额外的暴露，跨域的通信对象XMLHttpRequest只能获取标准的头部信息。</p> </li> <li> <p><code>Access-Control-Max-Age</code> 表示预检请求 [<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.w3.org/TR/cors/#preflight-request"  title="Preflight Request" rel="nofollow">Preflight Request</a>] 的最大缓存时间。</p> </li> </ul> </h1> </h1> <ul> <li>方式1：返回新的CorsFilter</li> <li>方式2：重写WebMvcConfigurer</li> <li>方式3：使用注解（@CrossOrigin）</li> <li>方式4：手工设置响应头（HttpServletResponse ）</li> </ul> <blockquote> <p>注：CorsFilter / WebMvcConfigurer / @CrossOrigin 需要SpringMVC 4.2 以上的版本才支持，对应SpringBoot 1.3 版本以上都支持这些CORS特性。不过，使用SpringMVC4.2 以下版本的小伙伴也不用慌，直接使用方式4通过手工添加响应头来授权CORS跨域访问也是可以的。附：在SpringBoot 1.2.8 + SpringMVC 4.1.9 亲测成功。</p> </blockquote> <blockquote> <p>注：方式1和方式2属于全局CORS配置，方式3和方式4属于局部CORS配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过@CrossOrigin注解来进行细粒度更高的跨域资源控制。</p> </blockquote> </h1> <p>在任意配置类，返回一个新的CorsFilter Bean，并添加映射路径和具体的CORS配置信息。</p> <pre><code>package com.hehe.yyweb.config;  @Configuration public class GlobalCorsConfig {     @Bean     public CorsFilter corsFilter() {         //1.添加CORS配置信息         CorsConfiguration config = new CorsConfiguration();           //放行哪些原始域           config.addAllowedOrigin("*");           //是否发送Cookie信息           config.setAllowCredentials(true);           //放行哪些原始域(请求方式)           config.addAllowedMethod("*");           //放行哪些原始域(头部信息)           config.addAllowedHeader("*");           //暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）           config.addExposedHeader("*");          //2.添加映射路径         UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();         configSource.registerCorsConfiguration("/**", config);          //3.返回新的CorsFilter.         return new CorsFilter(configSource);     } } </code></pre> </h1> <p>在任意配置类，返回一个新的WebMvcConfigurer Bean，并重写其提供的跨域请求处理的接口，目的是添加映射路径和具体的CORS配置信息。</p> <pre><code>package com.hehe.yyweb.config;  @Configuration public class GlobalCorsConfig {     @Bean     public WebMvcConfigurer corsConfigurer() {         return new WebMvcConfigurer() {             @Override             //重写父类提供的跨域请求处理的接口             public void addCorsMappings(CorsRegistry registry) {                 //添加映射路径                 registry.addMapping("/**")                         //放行哪些原始域                         .allowedOrigins("*")                         //是否发送Cookie信息                         .allowCredentials(true)                         //放行哪些原始域(请求方式)                         .allowedMethods("GET","POST", "PUT", "DELETE")                         //放行哪些原始域(头部信息)                         .allowedHeaders("*")                         //暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）                         .exposedHeaders("Header1", "Header2");             }         };     } } </code></pre> </h1> <p>在方法上（@RequestMapping）使用注解 <strong>@CrossOrigin</strong> ：</p> <pre><code>    @RequestMapping("/hello")     @ResponseBody     @CrossOrigin("http://localhost:8080")      public String index( ){         return "Hello World";     } </code></pre> <p>或者在控制器（@Controller）上使用注解 <strong>@CrossOrigin</strong> ：</p> <pre><code>@Controller @CrossOrigin(origins = "http://xx-domain.com", maxAge = 3600) public class AccountController {      @RequestMapping("/hello")     @ResponseBody     public String index( ){         return "Hello World";     } } </code></pre> </h1> <p>使用HttpServletResponse对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为"*" ，表示全部放行。</p> <pre><code>    @RequestMapping("/hello")     @ResponseBody     public String index(HttpServletResponse response){         response.addHeader("Access-Control-Allow-Origin", "http://localhost:8080");         return "Hello World";     } </code></pre> </h1> <p>首先使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/d2b08a671e27"  title="&nbsp;Spring Initializr&nbsp;" rel="nofollow">&nbsp;Spring Initializr&nbsp;</a> 快速构建一个Maven工程，什么都不用改，在static目录下，添加一个页面：index.html 来模拟跨域访问。目标地址: <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8090/hello"  title="http://localhost:8090/hello" rel="nofollow">http://localhost:8090/hello</a></p> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"/&gt;     &lt;title&gt;Page Index&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;前台系统&lt;/h2&gt; &lt;p id="info"&gt;&lt;/p&gt; &lt;/body&gt; &lt;script src="webjars/jquery/3.2.1/jquery.js"&gt;&lt;/script&gt; &lt;script&gt;     $.ajax({         url: 'http://localhost:8090/hello',         type: "POST",         xhrFields: {            withCredentials: true //允许跨域认证         },         success: function (data) {             $("#info").html("跨域访问成功:"+data);         },         error: function (data) {             $("#info").html("跨域失败!!");         }     }) &lt;/script&gt; &lt;/html&gt; </code></pre> <p>然后创建另一个工程，在Root Package添加Config目录并创建配置类来开启全局CORS。</p> <pre><code>package com.hehe.yyweb.config;  @Configuration public class GlobalCorsConfig {      @Bean     public WebMvcConfigurer corsConfigurer() {         return new WebMvcConfigurer() {             @Override             public void addCorsMappings(CorsRegistry registry) {                 registry.addMapping("/**");             }         };     } } </code></pre> <p>接着，简单编写一个Rest接口 ，并指定应用端口为8090。</p> <pre><code>package com.hehe.yyweb;  @SpringBootApplication @RestController public class YyWebApplication {      @Bean     public TomcatServletWebServerFactory tomcat() {         TomcatServletWebServerFactory tomcatFactory = new TomcatServletWebServerFactory();         tomcatFactory.setPort(8090); //默认启动8090端口         return tomcatFactory;     }      @RequestMapping("/hello")     public String index() {         return "Hello World";     }      public static void main(String[] args) {         SpringApplication.run(YyWebApplication.class, args);     } } </code></pre> <p>最后分别启动两个应用，然后在浏览器访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/index.html"  title="http://localhost:8080/index.html" rel="nofollow">http://localhost:8080/index.html</a> ，可以正常接收JSON数据，说明跨域访问成功！！</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230207/abad5536532caed4b8699b9c12da9777.jpg"></p> <p>尝试把全局CORS关闭，或者没有单独在方法或类上授权跨域，再次访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/index.html"  title="http://localhost:8080/index.html" rel="nofollow">http://localhost:8080/index.html</a> 时会看到跨域请求失败！！</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230207/439aa51c2b89e7f57f1b1e0795c9619e.jpg"></p> </h1> <p>源码地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/yizhiwazi/springboot-socks/tree/master/springboot-cross-orgin"  title="SpringBoot-Cross-Orgin&nbsp;" rel="nofollow">SpringBoot-Cross-Orgin&nbsp;</a></p> <p>专题阅读：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/964370d9374e"  title="《SpringBoot 布道系列》" rel="nofollow">《SpringBoot 布道系列》</a></p> <p>官方文档：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.w3.org/TR/cors/"  title="W3C规范-CORS" rel="nofollow">W3C规范-CORS</a></p> <p>传统文档：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors"  title="SpringMVC-CORS 使用手册" rel="nofollow">SpringMVC-CORS 使用手册</a></p> <p>推荐阅读：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.ruanyifeng.com/blog/2016/04/cors.html"  title="跨域资源共享 CORS 详解 - 阮一峰" rel="nofollow">跨域资源共享 CORS 详解 - 阮一峰</a></p> </h1> <p>原文链接：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/477e7eaa6c2f"  title="http://www.jianshu.com/p/477e7eaa6c2f" rel="nofollow">http://www.jianshu.com/p/477e7eaa6c2f</a><br /> 版权声明： 转载请注明出处 by yizhiwazi</p> <p> 作者：一只袜子<br /> 链接：https://www.jianshu.com/p/477e7eaa6c2f<br /> 来源：简书<br /> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-82017.htm">动物疫苗2021（动物疫苗接种途径）</a></p>
                                        <p>下一个：<a href="/news/article-82754.htm">Java中线程状态+线程安全问题+synchronized的用法详解_java_</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-21-free-node-subscribe.htm" title="「2月21日」最高速度22.6M/S，2025年NekoRay每天更新免费节点订阅链接">「2月21日」最高速度22.6M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-13-node-share-links.htm" title="「1月13日」最高速度19.8M/S，2025年NekoRay每天更新免费节点订阅链接">「1月13日」最高速度19.8M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-36730.htm" title="哈尔滨农业科学院兽医研究所招聘（哈尔滨农业科学院兽医研究所招聘信息）">哈尔滨农业科学院兽医研究所招聘（哈尔滨农业科学院兽医研究所招聘信息）</a></li>
                        <li class="py-2"><a href="/news/article-64772.htm" title="猫三联就打一针有用吗（不出门的猫有必要打猫三联吗）">猫三联就打一针有用吗（不出门的猫有必要打猫三联吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-11-free-nekoray.htm" title="「3月11日」最高速度20.4M/S，2025年NekoRay每天更新免费节点订阅链接">「3月11日」最高速度20.4M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-80611.htm" title="宠物品牌名称大全（好听的宠物品牌名字）">宠物品牌名称大全（好听的宠物品牌名字）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-free-nekoray.htm" title="「1月30日」最高速度21.4M/S，2025年NekoRay每天更新免费节点订阅链接">「1月30日」最高速度21.4M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-53837.htm" title="动物疫苗接种途径有哪些类型（动物疫苗包括哪些）">动物疫苗接种途径有哪些类型（动物疫苗包括哪些）</a></li>
                        <li class="py-2"><a href="/news/article-66643.htm" title="宠物领养平台国内外发展现状（宠物领养平台如何盈利）">宠物领养平台国内外发展现状（宠物领养平台如何盈利）</a></li>
                        <li class="py-2"><a href="/news/article-61766.htm" title="动物防疫疫苗种类有哪些名称（动物防疫疫苗种类有哪些名称和作用）">动物防疫疫苗种类有哪些名称（动物防疫疫苗种类有哪些名称和作用）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ====== END ABOUT======  -->
        <!-- ====== START FOOTER ======  -->
    <section class="footer">
        <div class="container">
            <div class="row">
                <!-- START FOOTER BOTTOM -->
                <div class="offset-md-3 col-md-6 offset-md-3">
                    <!-- START RIGHTS -->
                    <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>WindowsNekoRay节点分享站 版权所有</p>
                        <p>Powered by WordPress</p>
                    </div>
                    <!-- END RIGHTS -->
                </div>
                <!-- END FOOTER BOTTOM -->
            </div>
        </div>
    </section>
    <!-- ====== END FOOTER ======  -->
    <!-- ====== JS ======  -->
    <!--jquery-3.3.1 js-->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery-3.3.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/windowsnekoray/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/windowsnekoray/bootstrap.min.js"></script>
    <!-- scrollIt js -->
    <script src="/assets/website/js/frontend/windowsnekoray/scrollIt.min.js"></script>
    <!-- countTo js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.countTo.js"></script>
    <!-- filter js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.filterizr.min.js"></script>
    <!-- waypoints js -->
    <script src="/assets/website/js/frontend/windowsnekoray/waypoints.min.js"></script>
    <!-- owl carousel js -->
    <script src="/assets/website/js/frontend/windowsnekoray/owl.carousel.min.js"></script>
    <!-- validator js -->
    <script src="/assets/website/js/frontend/windowsnekoray/validator.js"></script>
    <!-- coustom js -->
    <script src="/assets/website/js/frontend/windowsnekoray/main.js"></script>
    <!-- lightbox js -->
    <script src="/assets/website/js/frontend/windowsnekoray/lightbox.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>