<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsnekoray.github.io/news/article-25391.htm" />
    <meta charset="utf-8">
    <!-- Always force latest IE rendering engine -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>设计模式详解之结构型设计模式——适配器、装饰器</title>
        <meta name="description" content="结构型设计模式 创建型设计模式主要是为了解决创建对象的问题，而结构型设计模式则是为了解决已有对象的使用问题。 适配器模式 适配器模式比较好理解，因为在我们的日常生活中就很常见，如耳机转换线、充电器适配" />
        <link rel="icon" href="/assets/website/img/windowsnekoray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsNekoRay节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsnekoray.github.io/news/article-25391.htm" />
    <meta property="og:site_name" content="WindowsNekoRay节点分享站" />
    <meta property="og:title" content="设计模式详解之结构型设计模式——适配器、装饰器" />
    <meta property="og:image" content="https://windowsnekoray.github.io/uploads/20240707/130827bc8a5bdf042dfb7d6c01792032.webp" />
        <meta property="og:release_date" content="2024-12-13T12:05:05" />
    <meta property="og:updated_time" content="2024-12-13T12:05:05" />
        <meta property="og:description" content="结构型设计模式 创建型设计模式主要是为了解决创建对象的问题，而结构型设计模式则是为了解决已有对象的使用问题。 适配器模式 适配器模式比较好理解，因为在我们的日常生活中就很常见，如耳机转换线、充电器适配" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="设计模式详解之结构型设计模式——适配器、装饰器">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- BOOTSTRAP CSS -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/bootstrap.min.css">
    <!-- FONT-AWESOME -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/font-awesome-4.7.0/css/font-awesome.min.css">
    <!-- OWL CAROUSEL -->
    <link href="/assets/website/css/windowsnekoray/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/windowsnekoray/owl.theme.default.min.css" rel="stylesheet">
    <!-- LIGHTBOX -->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/lightbox.css">
    <!--Style CSS file-->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FP5Q3FML8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FP5Q3FML8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ====== Preloader ======  -->
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section section-left"></div>
        <div class="loader-section section-right"></div>
    </div>
    <!-- ======End Preloader ======  -->
    <!-- ======START NAVGITION ======  -->
    <nav class="navbar navbar-expand-lg">
        <!-- logo -->
        <a class="navbar-brand" href="/">
                <span>Windows NekoRay</span>
                </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText">
            <span class="icon-bar"><i class="fa fa-bars fa-2x"></i></span>
        </button>
        <!--End of Resposive Toggle icon-->
        <div class="collapse navbar-collapse" id="navbarText">
            <!--Main menu navigation list-->
            <ul class="navbar-nav ml-auto line">
                                <li class="nav-item">
                    <a class="nav-link" href="/">首页</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/client.htm">客户端</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/news/">新闻资讯</a>
                </li>
                            </ul>
            <!--End of Main menu navigation list-->
        </div>
        <!--End of resposive collapse class-->
    </nav>
    <!-- ====== END NAVGITION ======  -->
    <!-- =======START HEADER=========== -->
    <header class="home list" id="home" data-scroll-index="0">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 home-content mt-md-5 mt-sm-5">
                    <h2 class="heading-tertiary mt-3 mb-3">
                        设计模式详解之结构型设计模式——适配器、装饰器                    </h2>
                    <p class="mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- ====== END HEADER ======  -->
    <!-- Scroll to Top -->
    <div id="scroll-to-top"><i class="fa fa-arrow-up fa-fw"></i></div>
    <!-- ====== START ABOUT ======  -->
    <section class="about padding" id="about" data-scroll-index="1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="结构型设计模式">结构型设计模式</h2> <p>创建型设计模式主要是为了解决创建对象的问题，而结构型设计模式则是为了解决已有对象的使用问题。</p> <h3 id="适配器模式">适配器模式</h3> <p>适配器模式比较好理解，因为在我们的日常生活中就很常见，如耳机转换线、充电器适配器、插座等，举个最常见的例子：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cac0851c9d7461b1c86901aee9c78a36.jpg" alt="设计模式详解之结构型设计模式——适配器、装饰器"></p> <p>插座就是个适配器，将一个接口扩展为多个接口，将墙上的双孔接口转换为三孔接口。而这也就是适配器的作用：将一个接口<strong>转换</strong>为用户期望的另一个接口。</p> <p>适配器的使用场景：</p> <ul> <li>需要使用第三方SDK的核心功能，但其接口或者功能不符合需求，这时可以使用适配器对其进行兼容和扩展</li> <li>随着业务发展，旧接口已经不能满足需求，但重写代价又太大，这时可以使用适配器对接口功能进行扩展</li> </ul> <blockquote> <p>注意：适配器是对已有资源进行兼容和扩展，属于一种折中的方式，如果可以的话，尽量重构系统而不是使用适配器</p> </blockquote> <p>继承器的实现有两种方式：<strong>继承</strong>和<strong>组合</strong>,基于合成复用的原则，组合优于继承，所以应尽量使用组合的方式实现适配器。类图如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d54612541514eaed432da4cff77aacf8.jpg" alt="设计模式详解之结构型设计模式——适配器、装饰器"></p> <p>实现代码：</p> <pre><code>    //已有的旧接口,不兼容于现在的系统     public interface IAmericanElectrictService     {         int Get110VElectric();     }          //adaptee，需要适配的SDK     public class AmericanElectrictService : IAmericanElectrictService     {         public int Get110VElectric()         {             Console.WriteLine("美国的电压是110v，只能提供110V的电压");             return 110;         }     }          //已有接口，现在的系统需要使用这个接口     public interface IChineseElectricService     {         int Get220VElectric();     }          //适配器，采取组合的方式     //这里是为了适配已有接口，所以实现了这个接口     public class AdapterPattern : IChineseElectricService     {         private readonly IAmericanElectrictService _service;          public AdapterPattern(IAmericanElectrictService service)         {             this._service = service;         }         public int Get220VElectric()         {             var electric = this._service.Get110VElectric();             Console.WriteLine("劈里啪啦劈里啪啦，经过一番操作，现在电压转换为220V的了");             return electric + 110;         }     }          //使用适配器，将110V电压转换成220V     public class AdapterRunner : IRunner     {         public void Run()         {             //实际情况中，adaptee有可能是已有SDK，有可能是interface，通过IOC容器对应具体实现类             var americanElectric = new AmericanElectrictService();             var electric = americanElectric.Get110VElectric();             Console.WriteLine($"获得了{electric}V电压");             Console.WriteLine("使用适配器");             var adapter = new AdapterPattern(americanElectric);             electric = adapter.Get220VElectric();             Console.WriteLine($"使用适配器后获得了{electric}V电压");         }     }     //输出     //------------------------------------     //美国的电压是110v，只能提供110V的电压     //获得了110V电压     //使用适配器     //美国的电压是110v，只能提供110V的电压     //劈里啪啦劈里啪啦，经过一番操作，现在电压转换为220V的了     //使用适配器后获得了220V电压</code></pre> <h3 id="总结">总结</h3> <p>优点：</p> <ul> <li>可以扩展和兼容现有类，灵活性高</li> <li>提高了类的复用，原本不能使用的类适配后能使用</li> </ul> <p>缺点：</p> <ul> <li>适配器本质是套一层，如果使用过多，可能导致系统混乱，甚至出现套中套的复杂情况</li> </ul> <h2 id="装饰器模式">装饰器模式</h2> <blockquote> <p>利用继承和组合，在不改变现有结构的情况下对功能进行扩展的模式称为<strong>装饰器模式</strong></p> </blockquote> <p>装饰器模式和适配器模式很像，但侧重点不一样。适配器的重心在于兼容已有系统，而装饰器的重心在于功能扩展。装饰器的类图如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/424a0141ca3490031f09824d463013ee.jpg" alt="设计模式详解之结构型设计模式——适配器、装饰器"></p> <p>上图中，基础装饰器继承抽象类，每个装饰器继承前一个装饰器，一步一步添加功能，并且所有装饰器都用到具体实现类，因为需要扩展具体功能。</p> <p>这里其实就能看出一些装饰器和适配器的区别，适配器和装饰器都使用组合来包装已有类，不同的是装饰器用到了<strong>继承</strong>。装饰器的核心原则是<strong>里氏替换原则</strong>，即父类一定能被子类替换而不影响现有代码。实现代码如下：</p> <pre><code>//抽象基础类 public abstract class AbstractStudent {     public abstract void Study(); }  //具体实现类 public class Student : AbstractStudent {     public override void Study()     {         Console.WriteLine("我正在学习！！！");     } }   //基础装饰器，什么也不做 //注意，这里标记为抽象类，此后的装饰器以此为基础 public abstract class BaseDecorator : AbstractStudent {     private readonly AbstractStudent _student;     public BaseDecorator(AbstractStudent student)     {         this._student = student;     }     //这里使用override还是Virtual取决于AbstractStudent基础类是抽象类还是接口     public override void Study()     {         this._student.Study();     } }  //前缀装饰器，在调用具体功能前做点什么  public class PreDecorator : BaseDecorator {     public PreDecorator(AbstractStudent student) : base(student)     {     }     public override void Study()     {         Console.WriteLine("学习前看会儿小说");         base.Study();     } }  //后缀装饰器，在调用具体功能后做点什么 public class NextDecorator : PreDecorator {     public NextDecorator(AbstractStudent student) : base(student)     {     }     public override void Study()     {         base.Study();         Console.WriteLine("学习辛苦啦，奖励自己一包辣条");     } }  //测试代码 public class DecoratorRunner : IRunner {     public void Run()     {         Console.WriteLine("没有用装饰器的基本功能：");         var student = new Student();         student.Study();         Console.WriteLine();                  Console.WriteLine("使用前缀装饰器在基础功能之前做点什么");         var preDecorator = new PreDecorator(student);         preDecorator.Study();         Console.WriteLine();                  Console.WriteLine("使用后缀装饰器在前缀装饰器功能之后做点什么");         //注意：这里传入的前缀装饰器，在前缀装饰器的基础之上做扩展         var nextDecorator = new NextDecorator(student);         nextDecorator.Study();     } }  //输出：   //没有用装饰器的基本功能： //我正在学习！！！ // //使用前缀装饰器在基础功能之前做点什么 //学习前看会儿小说 //我正在学习！！！ // //使用后缀装饰器在前缀装饰器功能之后做点什么 //学习前看会儿小说 //我正在学习！！！ //学习辛苦啦，奖励自己一包辣条</code></pre> <p>可以看出，装饰器其实就是利用<strong>组合+继承(实现)+override</strong>不断包装和更新对象，使其功能得到扩展。装饰器是用于<strong>替换继承</strong>的设计模式，主要使用场景如下：</p> <ul> <li>想扩展实现类的功能，又不想添加太多子类</li> <li>需要动态增加和撤销功能(例如游戏技能)</li> </ul> <p>装饰器的优点在于灵活，耦合性低，且不会改变现有结构。缺点则是嵌套过多会增加系统复杂度。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24923.htm">宠物店一包猫粮多少钱 宠物店一包猫粮多少钱啊</a></p>
                                        <p>下一个：<a href="/news/article-25393.htm">动物医院归哪里管理（动物医院属于什么性质）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-10-share-windows-nekoray.htm" title="「1月10日」最高速度18.1M/S，2025年NekoRay每天更新免费节点订阅链接">「1月10日」最高速度18.1M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-27-free-node-subscribe.htm" title="「1月27日」最高速度19.6M/S，2025年NekoRay每天更新免费节点订阅链接">「1月27日」最高速度19.6M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-38701.htm" title="动物医院注册商标名称（动物医院招牌图片）">动物医院注册商标名称（动物医院招牌图片）</a></li>
                        <li class="py-2"><a href="/news/article-42158.htm" title="golang关于panic的解析">golang关于panic的解析</a></li>
                        <li class="py-2"><a href="/news/article-56602.htm" title="一片片枫叶落下来就像什么（一片片枫叶随风飘落就像什么）">一片片枫叶落下来就像什么（一片片枫叶随风飘落就像什么）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-6-free-node-subscribe-links.htm" title="「2月6日」最高速度22.9M/S，2025年NekoRay每天更新免费节点订阅链接">「2月6日」最高速度22.9M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-free-nekoray.htm" title="「12月16日」最高速度22.7M/S，2024年NekoRay每天更新免费节点订阅链接">「12月16日」最高速度22.7M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-43646.htm" title="动物医院大众点评评语怎么写啊 动物医院大众点评评语怎么写啊英语">动物医院大众点评评语怎么写啊 动物医院大众点评评语怎么写啊英语</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-9-free-high-speed-nodes.htm" title="「12月9日」最高速度18.6M/S，2024年NekoRay每天更新免费节点订阅链接">「12月9日」最高速度18.6M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-50637.htm" title="win11系统磁盘被写保护怎么解除">win11系统磁盘被写保护怎么解除</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ====== END ABOUT======  -->
        <!-- ====== START FOOTER ======  -->
    <section class="footer">
        <div class="container">
            <div class="row">
                <!-- START FOOTER BOTTOM -->
                <div class="offset-md-3 col-md-6 offset-md-3">
                    <!-- START RIGHTS -->
                    <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>WindowsNekoRay节点分享站 版权所有</p>
                        <p>Powered by WordPress</p>
                    </div>
                    <!-- END RIGHTS -->
                </div>
                <!-- END FOOTER BOTTOM -->
            </div>
        </div>
    </section>
    <!-- ====== END FOOTER ======  -->
    <!-- ====== JS ======  -->
    <!--jquery-3.3.1 js-->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery-3.3.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/windowsnekoray/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/windowsnekoray/bootstrap.min.js"></script>
    <!-- scrollIt js -->
    <script src="/assets/website/js/frontend/windowsnekoray/scrollIt.min.js"></script>
    <!-- countTo js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.countTo.js"></script>
    <!-- filter js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.filterizr.min.js"></script>
    <!-- waypoints js -->
    <script src="/assets/website/js/frontend/windowsnekoray/waypoints.min.js"></script>
    <!-- owl carousel js -->
    <script src="/assets/website/js/frontend/windowsnekoray/owl.carousel.min.js"></script>
    <!-- validator js -->
    <script src="/assets/website/js/frontend/windowsnekoray/validator.js"></script>
    <!-- coustom js -->
    <script src="/assets/website/js/frontend/windowsnekoray/main.js"></script>
    <!-- lightbox js -->
    <script src="/assets/website/js/frontend/windowsnekoray/lightbox.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>