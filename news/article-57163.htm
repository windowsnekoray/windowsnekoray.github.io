<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsnekoray.github.io/news/article-57163.htm" />
    <meta charset="utf-8">
    <!-- Always force latest IE rendering engine -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SpringBoot快速开发利器：CLI 属实真牛逼！</title>
        <meta name="description" content="步骤1：使用以下链接下载Spring boot CLI  步骤2：解压缩并保存在你系统的某个地方。假设我把它保存在如下位置。 目录  			   来源：blog.csdn.net/qq_3163585" />
        <link rel="icon" href="/assets/website/img/windowsnekoray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsNekoRay节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsnekoray.github.io/news/article-57163.htm" />
    <meta property="og:site_name" content="WindowsNekoRay节点分享站" />
    <meta property="og:title" content="SpringBoot快速开发利器：CLI 属实真牛逼！" />
    <meta property="og:image" content="https://windowsnekoray.github.io/uploads/20240707/130827bc8a5bdf042dfb7d6c01792032.webp" />
        <meta property="og:release_date" content="2025-02-15T05:23:47" />
    <meta property="og:updated_time" content="2025-02-15T05:23:47" />
        <meta property="og:description" content="步骤1：使用以下链接下载Spring boot CLI  步骤2：解压缩并保存在你系统的某个地方。假设我把它保存在如下位置。 目录  			   来源：blog.csdn.net/qq_3163585" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot快速开发利器：CLI 属实真牛逼！">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- BOOTSTRAP CSS -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/bootstrap.min.css">
    <!-- FONT-AWESOME -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/font-awesome-4.7.0/css/font-awesome.min.css">
    <!-- OWL CAROUSEL -->
    <link href="/assets/website/css/windowsnekoray/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/windowsnekoray/owl.theme.default.min.css" rel="stylesheet">
    <!-- LIGHTBOX -->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/lightbox.css">
    <!--Style CSS file-->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FP5Q3FML8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FP5Q3FML8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ====== Preloader ======  -->
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section section-left"></div>
        <div class="loader-section section-right"></div>
    </div>
    <!-- ======End Preloader ======  -->
    <!-- ======START NAVGITION ======  -->
    <nav class="navbar navbar-expand-lg">
        <!-- logo -->
        <a class="navbar-brand" href="/">
                <span>Windows NekoRay</span>
                </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText">
            <span class="icon-bar"><i class="fa fa-bars fa-2x"></i></span>
        </button>
        <!--End of Resposive Toggle icon-->
        <div class="collapse navbar-collapse" id="navbarText">
            <!--Main menu navigation list-->
            <ul class="navbar-nav ml-auto line">
                                <li class="nav-item">
                    <a class="nav-link" href="/">首页</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/client.htm">客户端</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/news/">新闻资讯</a>
                </li>
                            </ul>
            <!--End of Main menu navigation list-->
        </div>
        <!--End of resposive collapse class-->
    </nav>
    <!-- ====== END NAVGITION ======  -->
    <!-- =======START HEADER=========== -->
    <header class="home list" id="home" data-scroll-index="0">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 home-content mt-md-5 mt-sm-5">
                    <h2 class="heading-tertiary mt-3 mb-3">
                        SpringBoot快速开发利器：CLI 属实真牛逼！                    </h2>
                    <p class="mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- ====== END HEADER ======  -->
    <!-- Scroll to Top -->
    <div id="scroll-to-top"><i class="fa fa-arrow-up fa-fw"></i></div>
    <!-- ====== START ABOUT ======  -->
    <section class="about padding" id="about" data-scroll-index="1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="步骤1：使用以下链接下载Spring boot CLI">步骤1：使用以下链接下载Spring boot CLI</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="步骤2：解压缩并保存在你系统的某个地方。假设我把它保存在如下位置。">步骤2：解压缩并保存在你系统的某个地方。假设我把它保存在如下位置。</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="content_views" class="htmledit_views"> <div id="js_content"> <p style="text-align:left;"><span style="font-size: 16px;">来源：blog.csdn.net/qq_31635851/article/details/120411711/</span></p> <ul> <li> <p>安装 Spring Boot CLI</p> </li> <li> <p>演示项目结构</p> </li> <li> <p>用 Spring Boot CLI 创建 Hello World 示例</p> </li> <li> <p>使用 @Grab 注释</p> </li> <li> <p>Spring Boot CLI 测试应用程序</p> </li> <li> <p>使用 Spring Boot CLI 打包应用程序</p> </li> <li> <p>使用 Spring Boot CLI 创建一个新项目</p> </li> <li> <p>使用嵌入式 Shell</p> </li> <li> <p>参考文献</p> </li> <li> <p>源码下载</p> </li> </ul> <hr/> <p>Spring boot CLI是运行spring boot命令的命令行界面。</p> <p>Spring提供了用于创建、运行和测试spring boot应用程序的spring命令。</p> <blockquote> <p>Spring boot CLI应用程序使用groovy语言，通过这种方式，我们用最少的代码行创建我们的应用程序并启动它。</p> </blockquote> <p>使用groovy的Spring boot CLI具有以下特点。</p> <ol> <li> <p>Spring boot CLI应用程序使用groovy。我们在应用程序中创建groovy文件，为此我们不需要提供groovy的任何JAR依赖。Spring boot会自己配置groovy的JAR依赖项。</p> </li> <li> <p>在编写groovy文件时，我们不需要写导入语句，直到需要为止。在写导入语句之前，我们应该检查我们是否得到导入错误。通过这种方式，我们尽可能地写出最少的代码行数。</p> </li> <li> <p>Spring boot CLI不需要任何构建工具。Spring boot以与Maven和Gradle相同的方式自动抓取spring依赖JAR包。版本是从Spring Boot CLI的版本中提取的。</p> </li> <li> <p>Spring boot下载JAR依赖项时，通过记住我们在应用程序编码中使用了哪些spring注解和类。如果我们使用<code>@Controller</code>注解，那么Spring Boot就会下载Spring Web应用程序的JAR依赖项。</p> </li> <li> <p>为了下载第三方依赖的JAR，如thymleaf，spring boot使用<code>@Grab</code>注释groovy功能。</p> </li> <li> <p>Spring boot提供<code>spring run</code>命令来运行应用程序，<code>spring test</code>命令来运行spring测试应用程序。</p> </li> <li> <p>我们可以使用spring boot命令行创建可执行的JAR文件。对于应用程序的打包，spring boot提供<code>spring jar</code>命令。</p> </li> <li> <p>使用命令行界面，我们可以使用spring init命令从<code>spring initializer</code>站点创建项目。</p> </li> <li> <p>Spring boot为Windows用户提供了使用<code>spring shell</code>命令的集成外壳。</p> </li> <li> <p>使用spring boot CLI时，我们不需要创建<code>spring boot main()</code>方法。它是由spring boot CLI自动提供的。</p> </li> </ol> <p>在这一篇，我们将安装spring boot CLI，然后我们将创建一个spring boot CLI示例应用程序，并运行它和测试它。</p> <h2><strong>安装 Spring Boot CLI</strong></h2> <p>要使用Spring boot CLI，首先我们需要在系统中安装它。有很多方法可以安装Spring boot CLI。</p> <ul> <li> <p>手动安装</p> </li> <li> <p>使用SDKMAN进行安装!</p> </li> <li> <p>OSX自制软件的安装</p> </li> <li> <p>MacPorts的安装</p> </li> <li> <p>命令行完成</p> </li> </ul> <p>找到Spring boot CLI安装细节的链接。在我的例子中，我将在我的Windows 7操作系统中使用手动安装来安装Spring boot CLI。找到下面的步骤。</p> <span class="directory"></span><h4 id="title-0">步骤1：使用以下链接下载Spring boot CLI</h4> <blockquote> <p>http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.4.3.RELEASE/spring-boot-cli-1.4.3.RELEASE-bin.zip</p> </blockquote> <span class="directory"></span><h4 id="title-1">步骤2：解压缩并保存在你系统的某个地方。假设我把它保存在如下位置。</h4> <pre class="has"><code class="language-go">C:\spring-1.4.3.RELEASE</code></pre> <p>现在我们需要在我们的系统中设置以下环境变量。</p> <ul> <li> <p>SPRING_HOME的值为<code>C:\spring-1.4.3.RELEASE</code></p> </li> <li> <p>PATH的值为<code>C:\spring-1.4.3.RELEASE\bin</code></p> </li> </ul> <p>步骤3：现在我们将测试我们的安装。打开命令提示符并键入命令spring，我们将得到以下结果。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/7f020d02a4d726525e0d90deb97f8f35.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><p>查找更多Spring boot CLI命令。</p> <ul> <li> <p><code>spring help run</code> : 提供支持的命令的详细信息。</p> </li> <li> <p><code>spring version</code> : 提供Spring boot CLI的版本。</p> </li> </ul> <p>现在我们可以开始使用Spring boot CLI了。</p> <h2><strong>演示项目结构</strong></h2> <p>找到演示项目结构，我们将使用spring boot CLI和groovy来运行。</p> <pre class="has"><code class="language-go">spring-app &nbsp;&nbsp;&nbsp;| &nbsp;&nbsp;&nbsp;&nbsp;--message.groovy&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;--hello.groovy&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;--tests.groovy &nbsp;&nbsp;&nbsp;&nbsp;--templates &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--hello.html &nbsp;&nbsp;&nbsp;&nbsp;--static &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--index.html</code></pre> <h2><strong>用 Spring Boot CLI 创建 Hello World 示例</strong></h2> <p>我们将使用Groovy创建一个简单的 "Hello World"网络应用。请看下面的代码。</p> <p>hello.groovy</p> <pre class="has"><code class="language-go">@RestController class&nbsp;HelloController&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping("/home") &nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;home()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Hello&nbsp;World!" &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>当我们使用Spring boot CLI和Groovy时，我们可以用最少的代码运行我们的应用程序。在我们的代码中，我们将得到以下结果。</p> <ol> <li> <p>默认的导入语句。在大多数情况下，我们不需要导入API。只有在不属于默认导入语句的情况下才可以导入。</p> </li> <li> <p>spring boot没有main方法。它将被自动创建。</p> </li> </ol> <p>为了编译和运行Groovy源代码，Spring boot CLI提供了run命令，我们按以下方式调用。</p> <pre class="has"><code class="language-go">spring&nbsp;run&nbsp;hello.groovy</code></pre> <p>使用该命令，我们实现了以下几点。</p> <ol> <li> <p>它下载所有的依赖性JAR。依赖性JAR的版本由我们所使用的Spring boot CLI的版本决定。下载JAR只在第一次时进行。</p> </li> <li> <p>依赖性JAR是由代码中使用的类和注解定义的。由于我们使用的是<code>@RestController</code>，所以会下载与Spring MVC和嵌入式Tomcat相关的JAR。</p> </li> <li> <p>现在它编译代码并在默认端口8080上启动嵌入式Tomcat服务器。</p> </li> </ol> <p>找到打印界面。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/dc5ce68bd9e9e338f060f1fc8ce6269a.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><p>通过URL <code>http://localhost:8080/home</code> 来访问该应用程序。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/f38b2fe7ebcc35f4df5b3f7b018885a2.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><p>如果我们想改变默认端口，那么我们需要用<code>server.port</code>运行命令，如下所示。</p> <pre class="has"><code class="language-go">spring&nbsp;run&nbsp;hello.groovy&nbsp;--&nbsp;--server.port=8484</code></pre> <p>我们需要注意，我们将使用分隔符--与spring命令参数<code>--server.port</code>一起。现在，嵌入式Tomcat将以8484端口启动，为了运行应用程序，我们需要使用<code>http://localhost:8484/home</code>来访问。</p> <p>如果我们有多个groovy文件，并且要一起运行所有这些groovy文件，我们可以使用以下命令。</p> <pre class="has"><code class="language-go">spring&nbsp;run&nbsp;*.groovy</code></pre> <h2><strong>使用 @Grab 注释</strong></h2> <p>Groovy提供了@Grab注解来解决JAR的依赖性。</p> <p>Spring boot也支持@Grab注解，只解决第三方的依赖。</p> <p>根据Spring注解和应用程序中使用的类，Spring的依赖性被自动抓取。</p> <p>它下载JAR的方式与Maven和Gradle相同，无需使用任何构建工具。我们使用@Grab注解来下载第三方依赖，如下所示。</p> <pre class="has"><code class="language-go">@Grab('spring-boot-starter-thymeleaf') class&nbsp;MessageController&nbsp;{}</code></pre> <p>在上面的代码中，我们将看到我们只需要传递artifact id。Group id 和 version将从spring boot的默认依赖元数据中获取。</p> <p>现在找到这个例子中使用的groovy和HTML文件。</p> <p>message.groovy</p> <pre class="has"><code class="language-go">@Controller @Grab('spring-boot-starter-thymeleaf') class&nbsp;MessageController&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping("/msg") &nbsp;String&nbsp;getMsg(Model&nbsp;model)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;msg&nbsp;=&nbsp;"Welcome&nbsp;to&nbsp;Everyone!"; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.addAttribute("message",&nbsp;msg); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;"hello"; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>templates/hello.html</p> <pre class="has"><code class="language-go">&lt;!DOCTYPE&nbsp;HTML&gt; &lt;html&nbsp;xmlns:th="http://www.thymeleaf.org"&gt; &lt;head&gt;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Spring&nbsp;Boot&nbsp;CLI&nbsp;Example&lt;/title&gt;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;http-equiv="Content-Type"&nbsp;content="text/html;&nbsp;charset=UTF-8"&nbsp;/&gt; &lt;/head&gt; &lt;body&gt;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;p&nbsp;th:text="'Message:&nbsp;'&nbsp;+&nbsp;${message}"&nbsp;/&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>static/index.html</p> <pre class="has"><code class="language-go">&lt;!DOCTYPE&nbsp;HTML&gt; &lt;html&gt; &lt;head&gt;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Spring&nbsp;Boot&nbsp;CLI&nbsp;Example&lt;/title&gt;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;http-equiv="Content-Type"&nbsp;content="text/html;&nbsp;charset=UTF-8"&nbsp;/&gt; &lt;/head&gt; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Click&nbsp;to&nbsp;get&nbsp;&lt;a&nbsp;href="/msg"&gt;Message&lt;/a&gt;&nbsp;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>要运行这个例子，在项目的根目录下用命令提示符运行以下命令。</p> <pre class="has"><code class="language-go">spring&nbsp;run&nbsp;*.groovy</code></pre> <p>现在访问 <code>http://localhost:8080/</code></p> <p>Spring boot只需要@Grab注解来解决第三方JAR，例如spring-boot-starter-thymeleaf，freemarker等。</p> <p>Spring boot会根据需要自动抓取spring JAR。</p> <p>例如，如果我们使用以下注解和类，那么相关的JAR依赖将被自动下载。</p> <ol> <li> <p>@Controller @RestController @EnableWebMvc : 在这种情况下，Spring MVC和嵌入式Tomcat将被下载。</p> </li> <li> <p>@EnableWebSecurity : Spring安全相关的JAR将被下载。</p> </li> <li> <p>@EnableJms: JMS应用程序相关的JAR将被下载。</p> </li> <li> <p>@Test : 将会下载Spring测试应用相关的JAR。</p> </li> </ol> <p>具体请查看链接中的Deduced “grab” Dependencies部分</p> <h2><strong>Spring Boot CLI 测试应用程序</strong></h2> <p>Spring boot CLI提供了test命令，我们可以用它来测试我们的spring boot应用程序。找到我们例子中使用的groovy类来测试hello.groovy。</p> <p>tests.groovy</p> <pre class="has"><code class="language-go">class&nbsp;ApplicationTests&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;@Test &nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;HelloAppTest()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals("Hello&nbsp;World!",&nbsp;new&nbsp;HelloController().home()) &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>要运行测试应用程序，请使用以下命令。</p> <pre class="has"><code class="language-go">spring&nbsp;test&nbsp;hello.groovy&nbsp;tests.groovy</code></pre> <p>上述命令的说明如下。</p> <ul> <li> <p><code>spring test</code>：Spring boot CLI命令，用于测试应用程序。</p> </li> <li> <p><code>hello.groovy</code>：需要测试的应用程序文件。</p> </li> <li> <p><code>tests.groovy</code>：测试文件，用于测试应用程序文件。</p> </li> </ul> <p>运行该命令后，我们得到的结果如下。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/8a2685fe20c4852f3d2e011d362c2c27.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><h2><strong>使用 Spring Boot CLI 打包应用程序</strong></h2> <p>Spring boot CLI提供了jar命令来打包我们的应用程序。我们可以按以下方式使用它。</p> <pre class="has"><code class="language-go">spring&nbsp;jar&nbsp;spring-app.jar&nbsp;*.groovy</code></pre> <p>这将创建两个JAR。</p> <ul> <li> <p><code>spring-app.jar</code> : 这是可执行的JAR。</p> </li> <li> <p><code>spring-app.jar.original</code> : 这是原JAR。</p> </li> </ul> <p>可执行的jar文件的运行方式如下。</p> <pre class="has"><code class="language-go">java&nbsp;-jar&nbsp;spring-app.jar</code></pre> <p>找到打印界面。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/00118f7cd5d6bd0022bc6bcae5d3b8cf.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><p>在打包应用程序时，spring boot默认包括以下目录。</p> <pre class="has"><code class="language-go">public/**,&nbsp;resources/**,&nbsp;static/**,&nbsp;templates/**,&nbsp;META-INF/**</code></pre> <p>而默认的排除目录是</p> <pre class="has"><code class="language-go">repository/**,&nbsp;build/**,&nbsp;target/**,&nbsp;**/*.jar,&nbsp;**/*.groovy</code></pre> <p>使用<code>--include</code>，我们可以将默认排除目录添加到打包的目录中。使用<code>--exclude</code>，我们可以删除打包的目录。有关更多详细信息，我们可以按如下方式运行help命令。</p> <pre class="has"><code class="language-go">spring&nbsp;help&nbsp;jar</code></pre> <h2><strong>使用 Spring Boot CLI 创建一个新项目</strong></h2> <p>使用init命令，Spring boot CLI可以用maven作为默认的构建工具创建一个新项目，该工具使用<code>https://start.spring.io</code>。假设我们想用thymleaf创建一个Web项目，那么我们将运行如下命令。</p> <pre class="has"><code class="language-go">spring&nbsp;init&nbsp;--dependencies=web,thymeleaf&nbsp;my-app.zip</code></pre> <p>在pom.xml中，web,thymeleaf的依赖关系将配置为以下spring boot启动器。</p> <pre class="has"><code class="language-go">spring-boot-starter-web spring-boot-starter-thymeleaf</code></pre> <p>my-app.zip文件将被下载到我们运行命令的目录中。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/0ad604c40c7871da75b2bcada0eefb45.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><p>如果我们想使用Gradle构建工具，用任何特定的java版本构建WAR文件，那么我们可以运行如下命令。</p> <pre class="has"><code class="language-go">spring&nbsp;init&nbsp;--build=gradle&nbsp;--java-version=1.8&nbsp;--dependencies=web,thymeleaf&nbsp;--packaging=war&nbsp;my-app.zip</code></pre> <h2><strong>使用嵌入式 Shell</strong></h2> <p>Spring boot有BASH和Zsh shells的命令行完成脚本。</p> <p>如果我们使用WINDOWS，Spring Boot提供shell命令来启动一个集成shell。如果使用WINDOWS，那么使用以下命令启动集成shell。</p> <pre class="has"><code class="language-go">spring&nbsp;shell</code></pre> <p>现在我们可以直接运行命令而不使用spring关键字，如</p> <pre class="has"><code class="language-go">$&nbsp;version $&nbsp;test&nbsp;hello.groovy&nbsp;tests.groovy $&nbsp;run&nbsp;hello.groovy</code></pre> <p>找到打印界面。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/a400f95cfb324361da1558f7fb1de93f.jpg" alt="SpringBoot快速开发利器：CLI 属实真牛逼！"></p><figcaption>   图片<br />  </figcaption><h2><strong>源码下载</strong></h2> <ul> <li> <p>https://www.concretepage.com/spring-boot/download/spring-boot-cli-example.zip</p> </li> </ul> <pre></pre> <pre></pre> <pre></pre> <pre></pre> <pre></pre> <pre class="has"><code class="language-go">热门内容：</code></pre> <ul> <li> <p><a href="" rel="nofollow">吐血推荐17个提升开发效率的“轮子”</a></p> </li> <li> <p><a href="" rel="nofollow">微信为什么使用 SQLite 保存聊天记录？</a></p> </li> <li> <p><a href="" rel="nofollow">Spring中毒太深，离开Spring居然连最基本的接口都不会写了</a></p> </li> <li> <p><a href="" rel="nofollow">面试官：线上MySQL的自增id用尽怎么办？</a></p> </li> <li> <p><a href="" rel="nofollow">别再写 main 方法测试了，太 Low！这才是专业 Java 测试方法！</a></p> </li> </ul> <pre></pre> <pre class="has"><code class="language-go">最近面试BAT，整理一份面试资料《Java面试BAT通关手册》，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构等等。 获取方式：点“在看”，关注公众号并回复&nbsp;666&nbsp;领取，更多内容陆续奉上。</code></pre> <p style="text-align:right;"></p> </div></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-56603.htm">免费领养宠物猫的正规平台（正规免费领养宠物猫app）</a></p>
                                        <p>下一个：<a href="/news/article-57164.htm">建议穷人养的10种猫母猫图片（穷人养猫还是富人养猫）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-27-free-node-subscribe-links.htm" title="「11月27日」最高速度20.4M/S，2024年NekoRay每天更新免费节点订阅链接">「11月27日」最高速度20.4M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-30997.htm" title="宠物领养合同违约金3000合理吗怎么赔偿 宠物领养合同违约金3000合理吗怎么赔偿呢">宠物领养合同违约金3000合理吗怎么赔偿 宠物领养合同违约金3000合理吗怎么赔偿呢</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-node-share-links.htm" title="「11月13日」最高速度19.2M/S，2024年NekoRay每天更新免费节点订阅链接">「11月13日」最高速度19.2M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-7-free-nekoray.htm" title="「2月7日」最高速度20.3M/S，2025年NekoRay每天更新免费节点订阅链接">「2月7日」最高速度20.3M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-27-free-node-subscribe.htm" title="「1月27日」最高速度19.6M/S，2025年NekoRay每天更新免费节点订阅链接">「1月27日」最高速度19.6M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-26326.htm" title="反射的概念 和基本使用（一）">反射的概念 和基本使用（一）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-26-linux-nekoray-node.htm" title="「1月26日」最高速度21.6M/S，2025年NekoRay每天更新免费节点订阅链接">「1月26日」最高速度21.6M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21672.htm" title="MySQL CONCAT()函数如何使用通配符">MySQL CONCAT()函数如何使用通配符</a></li>
                        <li class="py-2"><a href="/news/article-34341.htm" title="宠物疫苗是去宠物医院还是宠物店（疫苗去宠物医院打还是防疫站）">宠物疫苗是去宠物医院还是宠物店（疫苗去宠物医院打还是防疫站）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-3-free-v2ray-subscribe.htm" title="「2月3日」最高速度21.3M/S，2025年NekoRay每天更新免费节点订阅链接">「2月3日」最高速度21.3M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">51</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ====== END ABOUT======  -->
        <!-- ====== START FOOTER ======  -->
    <section class="footer">
        <div class="container">
            <div class="row">
                <!-- START FOOTER BOTTOM -->
                <div class="offset-md-3 col-md-6 offset-md-3">
                    <!-- START RIGHTS -->
                    <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>WindowsNekoRay节点分享站 版权所有</p>
                        <p>Powered by WordPress</p>
                    </div>
                    <!-- END RIGHTS -->
                </div>
                <!-- END FOOTER BOTTOM -->
            </div>
        </div>
    </section>
    <!-- ====== END FOOTER ======  -->
    <!-- ====== JS ======  -->
    <!--jquery-3.3.1 js-->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery-3.3.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/windowsnekoray/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/windowsnekoray/bootstrap.min.js"></script>
    <!-- scrollIt js -->
    <script src="/assets/website/js/frontend/windowsnekoray/scrollIt.min.js"></script>
    <!-- countTo js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.countTo.js"></script>
    <!-- filter js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.filterizr.min.js"></script>
    <!-- waypoints js -->
    <script src="/assets/website/js/frontend/windowsnekoray/waypoints.min.js"></script>
    <!-- owl carousel js -->
    <script src="/assets/website/js/frontend/windowsnekoray/owl.carousel.min.js"></script>
    <!-- validator js -->
    <script src="/assets/website/js/frontend/windowsnekoray/validator.js"></script>
    <!-- coustom js -->
    <script src="/assets/website/js/frontend/windowsnekoray/main.js"></script>
    <!-- lightbox js -->
    <script src="/assets/website/js/frontend/windowsnekoray/lightbox.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>