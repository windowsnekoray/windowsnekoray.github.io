<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsnekoray.github.io/news/article-73155.htm" />
    <meta charset="utf-8">
    <!-- Always force latest IE rendering engine -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Python调用C++程序的几种方法</title>
        <meta name="description" content="大家都知道Python的优点是开发效率高，使用方便，C++则是运行效率高，这两者可以相辅相成，不管是在Python项目中嵌入C++代码，或是在C++项目中用Python实现外围功能，都可能遇到Pyth" />
        <link rel="icon" href="/assets/website/img/windowsnekoray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsNekoRay节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsnekoray.github.io/news/article-73155.htm" />
    <meta property="og:site_name" content="WindowsNekoRay节点分享站" />
    <meta property="og:title" content="Python调用C++程序的几种方法" />
    <meta property="og:image" content="https://windowsnekoray.github.io/uploads/20240707/013e0ac02a6b9df892d6de47448f71b1.webp" />
        <meta property="og:release_date" content="2025-03-13T09:22:52" />
    <meta property="og:updated_time" content="2025-03-13T09:22:52" />
        <meta property="og:description" content="大家都知道Python的优点是开发效率高，使用方便，C++则是运行效率高，这两者可以相辅相成，不管是在Python项目中嵌入C++代码，或是在C++项目中用Python实现外围功能，都可能遇到Pyth" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Python调用C++程序的几种方法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- BOOTSTRAP CSS -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/bootstrap.min.css">
    <!-- FONT-AWESOME -->
    <link rel="stylesheet" href="/assets/website/css/windowsnekoray/font-awesome-4.7.0/css/font-awesome.min.css">
    <!-- OWL CAROUSEL -->
    <link href="/assets/website/css/windowsnekoray/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/windowsnekoray/owl.theme.default.min.css" rel="stylesheet">
    <!-- LIGHTBOX -->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/lightbox.css">
    <!--Style CSS file-->
    <link rel=" stylesheet" href="/assets/website/css/windowsnekoray/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FP5Q3FML8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FP5Q3FML8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ====== Preloader ======  -->
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section section-left"></div>
        <div class="loader-section section-right"></div>
    </div>
    <!-- ======End Preloader ======  -->
    <!-- ======START NAVGITION ======  -->
    <nav class="navbar navbar-expand-lg">
        <!-- logo -->
        <a class="navbar-brand" href="/">
                <span>Windows NekoRay</span>
                </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText">
            <span class="icon-bar"><i class="fa fa-bars fa-2x"></i></span>
        </button>
        <!--End of Resposive Toggle icon-->
        <div class="collapse navbar-collapse" id="navbarText">
            <!--Main menu navigation list-->
            <ul class="navbar-nav ml-auto line">
                                <li class="nav-item">
                    <a class="nav-link" href="/">首页</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/client.htm">客户端</a>
                </li>
                                <li class="nav-item">
                    <a class="nav-link" href="/news/">新闻资讯</a>
                </li>
                            </ul>
            <!--End of Main menu navigation list-->
        </div>
        <!--End of resposive collapse class-->
    </nav>
    <!-- ====== END NAVGITION ======  -->
    <!-- =======START HEADER=========== -->
    <header class="home list" id="home" data-scroll-index="0">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 home-content mt-md-5 mt-sm-5">
                    <h2 class="heading-tertiary mt-3 mb-3">
                        Python调用C++程序的几种方法                    </h2>
                    <p class="mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- ====== END HEADER ======  -->
    <!-- Scroll to Top -->
    <div id="scroll-to-top"><i class="fa fa-arrow-up fa-fw"></i></div>
    <!-- ====== START ABOUT ======  -->
    <section class="about padding" id="about" data-scroll-index="1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>大家都知道Python的优点是开发效率高，使用方便，C++则是运行效率高，这两者可以相辅相成，不管是在Python项目中嵌入C++代码，或是在C++项目中用Python实现外围功能，都可能遇到Python调用C++模块的需求，下面列举出集中c++代码导出成Python接口的几种基本方法，一起来学习学习吧。</p> </h1> <p>Python解释器就是用C实现，因此只要我们的C++的数据结构能让Python认识，理论上就是可以被直接调用的。我们实现test1.cpp如下</p> <pre class="has"><code class="language-cpp">#include &lt;Python.h&gt;     int Add(int x, int y)  {      return x + y;  }     int Del(int x, int y)  {      return x - y;  }     PyObject* WrappAdd(PyObject* self, PyObject* args)  {      int x, y;      if (!PyArg_ParseTuple(args, "ii", &amp;x, &amp;y))      {          return NULL;      }      return Py_BuildValue("i", Add(x, y));  }     PyObject* WrappDel(PyObject* self, PyObject* args)  {      int x, y;      if (!PyArg_ParseTuple(args, "ii", &amp;x, &amp;y))      {          return NULL;      }      return Py_BuildValue("i", Del(x, y));  }   static PyMethodDef test_methods[] = {      {"Add", WrappAdd, METH_VARARGS, "something"},      {"Del", WrappDel, METH_VARARGS, "something"},      {NULL, NULL}  };     extern "C" void inittest1()  {      Py_InitModule("test1", test_methods);     } </code></pre> <p>编译命令如下</p> <pre class="has"><code>g++ -fPIC -shared test1.cpp -I/usr/include/python2.7 -o test1.so  </code></pre> <blockquote> <p>-fPIC：生成位置无关目标代码，适用于动态连接；<br /> -L path：表示在path目录中搜索库文件，如-L.表示在当前目录；<br /> -I path：表示在path目录中搜索头文件；<br /> -o file：制定输出文件为file；<br /> -shared：生成一个共享库文件；</p> </blockquote> <p>&nbsp;运行Python解释器，测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test1  &gt;&gt;&gt; test1.Add(1,2)  3  </code></pre> <p><strong>这里要注意一下几点</strong></p> <ol> <li>如果生成的动态库名字为test1，则源文件里必须有inittest1这个函数，且Py_InitModule的第一个参数必须是“test1”，否则Python导入模块会失败</li> <li>如果是cpp源文件，inittest1函数必须用extern "C"修饰，如果是c源文件，则不需要。原因是Python解释器在导入库时会寻找initxxx这样的函数，而C和C++对函数符号的编码方式不同，C++在对函数符号进行编码时会考虑函数长度和参数类型，具体可以通过<code>nm test1.so</code>查看函数符号，c++filt工具可通过符号反解出函数原型</li> </ol> </h1> <p>我们使用和上面同样的例子，实现test2.cpp如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python/module.hpp&gt;  #include &lt;boost/python/def.hpp&gt;  using namespace boost::python;     int Add(const int x, const int y)  {      return x + y;  }     int Del(const int x, const int y)  {      return x - y;  }     BOOST_PYTHON_MODULE(test2)  {      def("Add", Add);      def("Del", Del);  } </code></pre> <p>其中BOOST_PYTHON_MODULE的参数为要导出的模块名字，编译命令如下</p> <pre class="has"><code>g++ test2.cpp -fPIC -shared -o test2.so -I/usr/include/python2.7 -I/usr/local/include -L/usr/local/lib -lboost_python  </code></pre> <p><strong>注意：</strong> 编译时需要指定boost头文件和库的路径，我这里分别是/usr/local/include和/usr/local/lib</p> <p>或者通过setup.py导出模块</p> <pre class="has"><code class="language-python">#!/usr/bin/env python  from distutils.core import setup  from distutils.extension import Extension     setup(name="PackageName",   ext_modules=[    Extension("test2", ["test2.cpp"],    libraries = ["boost_python"])   ]) </code></pre> <p>Extension的第一个参数为模块名，第二个参数为文件名</p> <p>执行如下命令</p> <pre class="has"><code>python setup.py build  </code></pre> <p>这时会生成build目录，找到里面的test2.so，并进入同一级目录，验证如下</p> <pre class="has"><code>&gt;&gt;&gt; import test2  &gt;&gt;&gt; test2.Add(1,2)  3 &gt;&gt;&gt; test2.Del(1,2)  -1  </code></pre> </h1> <p>test3.cpp实现如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python.hpp&gt;  using namespace boost::python;     class Test  {      public:          int Add(const int x, const int y)          {              return x + y;          }           int Del(const int x, const int y)          {              return x - y;          }  };     BOOST_PYTHON_MODULE(test3)  {      class_&lt;Test&gt;("Test")          .def("Add", &amp;Test::Add)          .def("Del", &amp;Test::Del);  } </code></pre> <p><strong>注意：</strong>BOOST_PYTHON_MODULE里的.def使用方法有点类似Python的语法，等同于</p> <pre class="has"><code>class_&lt;Test&gt;("Test").def("Add", &amp;Test::Add);  class_&lt;Test&gt;("Test").def("Del", &amp;Test::Del);  </code></pre> <p>编译命令如下</p> <pre class="has"><code>g++ test3.cpp -fPIC -shared -o test3.so -I/usr/include/python2.7 -I/usr/local/include/boost -L/usr/local/lib -lboost_python  </code></pre> <p>测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test3  &gt;&gt;&gt; test = test3.Test()  &gt;&gt;&gt; test.Add(1,2)  3 &gt;&gt;&gt; test.Del(1,2)  -1  </code></pre> </h1> <p>test4.cpp实现如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python.hpp&gt;  using namespace boost::python;     class Test  {      public:          int Add(const int x, const int y, const int z = 100)          {          return x + y + z;          }  };     int Del(const int x, const int y, const int z = 100)  {      return x - y - z;  }     BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(Add_member_overloads, Add, 2, 3)  BOOST_PYTHON_FUNCTION_OVERLOADS(Del_overloads, Del, 2, 3)     BOOST_PYTHON_MODULE(test4)  {      class_&lt;Test&gt;("Test")          .def("Add", &amp;Test::Add, Add_member_overloads(args("x", "y", "z"), "something"));      def("Del", Del, Del_overloads(args("x", "y", "z"), "something"));      } </code></pre> <p>这里Add和Del函数均采用了默认参数，Del为普通函数，Add为类成员函数，这里分别调用了不同的宏，宏的最后两个参数分别代表函数的最少参数个数和最多参数个数</p> <p>编译命令如下</p> <pre class="has"><code>g++ test4.cpp -fPIC -shared -o test4.so -I/usr/include/python2.7 -I/usr/local/include/boost -L/usr/local/lib -lboost_python  </code></pre> <p>测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test4  &gt;&gt;&gt; test = test4.Test()  &gt;&gt;&gt; print test.Add(1,2)  103 &gt;&gt;&gt; print test.Add(1,2,z=3)  6 &gt;&gt;&gt; print test4.Del(1,2)  -1 &gt;&gt;&gt; print test4.Del(1,2,z=3)  -1 </code></pre> </h1> <p>既然是导出为Python接口，调用者难免会使用Python特有的数据结构，比如tuple,list,dict，由于原生态方法太麻烦，这里只记录boost的使用方法，假设要实现如下的Python函数功能</p> <pre class="has"><code>def Square(list_a)  {      return [x * x for x in list_a]  } </code></pre> <p>即对传入的list每个元素计算平方，返回list类型的结果，代码如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python.hpp&gt;     boost::python::list Square(boost::python::list&amp; data)  {      boost::python::list ret;      for (int i = 0; i &lt; len(data); ++i)      {          ret.append(data[i] * data[i]);      }       return ret;  }     BOOST_PYTHON_MODULE(test5)  {      def("Square", Square);   } </code></pre> <p>编译命令如下</p> <pre class="has"><code>g++ test5.cpp -fPIC -shared -o test5.so -I/usr/include/python2.7 -I/usr/local/include/boost -L/usr/local/lib -lboost_python  </code></pre> <p>测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test5  &gt;&gt;&gt; test5.Square([1,2,3])  [1, 4, 9]  </code></pre> <p>boost实现了<code>boost::python::tuple</code>, <code>boost::python::list</code>, <code>boost::python::dict</code>这几个数据类型，使用方法基本和Python保持一致，具体方法可以查看boost头文件里的boost/python/tuple.hpp及其它对应文件</p> <p>另外比较常用的一个函数是<code>boost::python::make_tuple()</code> ，使用方法如下</p> <pre class="has"><code>boost::python::tuple(int a, int b, int c)  {       return boost::python::make_tuple(a, b, c);  }  </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-72499.htm">宠物粮食店铺名字怎么取 宠物粮食店铺名字怎么取好听</a></p>
                                        <p>下一个：<a href="/news/article-73156.htm">vue预览excel文档_在vue中，实现纯前端展示excel文件</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-40175.htm" title="2022公务员国考人数多少（今年公务员国考人数）">2022公务员国考人数多少（今年公务员国考人数）</a></li>
                        <li class="py-2"><a href="/news/article-48094.htm" title="动物疫苗在哪打的啊多少钱啊（动物接种疫苗多少钱）">动物疫苗在哪打的啊多少钱啊（动物接种疫苗多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-42656.htm" title="常见 几种 git操作代码回退的方法">常见 几种 git操作代码回退的方法</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-7-free-nekoray.htm" title="「2月7日」最高速度20.3M/S，2025年NekoRay每天更新免费节点订阅链接">「2月7日」最高速度20.3M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-71164.htm" title="动物医院好评语（动物医院好评语30字通用）">动物医院好评语（动物医院好评语30字通用）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-free-v2ray-subscribe.htm" title="「1月20日」最高速度18.9M/S，2025年NekoRay每天更新免费节点订阅链接">「1月20日」最高速度18.9M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-49604.htm" title="Springboot中整合knife4j接口文档">Springboot中整合knife4j接口文档</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-4-free-node-subscribe-links.htm" title="「1月4日」最高速度18.9M/S，2025年NekoRay每天更新免费节点订阅链接">「1月4日」最高速度18.9M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-39681.htm" title="我们如何获得排序的MySQL输出？">我们如何获得排序的MySQL输出？</a></li>
                        <li class="py-2"><a href="/news/article-50126.htm" title="天津宠物博览会官网预约（天津宠物展览会）">天津宠物博览会官网预约（天津宠物展览会）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ====== END ABOUT======  -->
        <!-- ====== START FOOTER ======  -->
    <section class="footer">
        <div class="container">
            <div class="row">
                <!-- START FOOTER BOTTOM -->
                <div class="offset-md-3 col-md-6 offset-md-3">
                    <!-- START RIGHTS -->
                    <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>WindowsNekoRay节点分享站 版权所有</p>
                        <p>Powered by WordPress</p>
                    </div>
                    <!-- END RIGHTS -->
                </div>
                <!-- END FOOTER BOTTOM -->
            </div>
        </div>
    </section>
    <!-- ====== END FOOTER ======  -->
    <!-- ====== JS ======  -->
    <!--jquery-3.3.1 js-->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery-3.3.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/windowsnekoray/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/windowsnekoray/bootstrap.min.js"></script>
    <!-- scrollIt js -->
    <script src="/assets/website/js/frontend/windowsnekoray/scrollIt.min.js"></script>
    <!-- countTo js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.countTo.js"></script>
    <!-- filter js -->
    <script src="/assets/website/js/frontend/windowsnekoray/jquery.filterizr.min.js"></script>
    <!-- waypoints js -->
    <script src="/assets/website/js/frontend/windowsnekoray/waypoints.min.js"></script>
    <!-- owl carousel js -->
    <script src="/assets/website/js/frontend/windowsnekoray/owl.carousel.min.js"></script>
    <!-- validator js -->
    <script src="/assets/website/js/frontend/windowsnekoray/validator.js"></script>
    <!-- coustom js -->
    <script src="/assets/website/js/frontend/windowsnekoray/main.js"></script>
    <!-- lightbox js -->
    <script src="/assets/website/js/frontend/windowsnekoray/lightbox.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>